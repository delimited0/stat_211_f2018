beta_samples[k - 1, ]
y - X %*% beta_samples[k - 1, ]
4 * sigma_samples[k]
sigma_samples[k]
rate <- (y - X %*% beta_samples[k - 1, ] + 4 * sigma_samples[k - 1]) /
(2 * sigma_samples[k])
tau_samples[k, ] <- rgamma(n, 5 / 2 , rate)
rate
4 * sigma_samples[k - 1]
rate <- (y - X %*% beta_samples[k - 1, ] + 4 * sigma_samples[k - 1]) /
(2 * sigma_samples[k - 1])
rate
2 + 4 * sigma_samples[k - 1]) /
rate <- ((y - X %*% beta_samples[k - 1, ]) ^ 2 + 4 * sigma_samples[k - 1]) /
(2 * sigma_samples[k - 1])
rate
tau_samples[k, ] <- rgamma(n, 5 / 2 , rate)
tau_samples[k,]
rate <- tau_samples[k, ] %*% (y - X %*% beta_samples[k - 1, ]) +
xi_samples[k - 1] * (beta_samples[k - 1, ] %*% beta_samples[k - 1, ]) + b
rate
library(installR)
library(updateR)
updateR::updateR("D@3dalus")
version
install.packages("tufte")
pwd()
getwd()
(-2 + sqrt(4  - 4 * 3 * (-10))) / (2 * 3)
sqrt(31) / 3 - (1 / 3)
(-2 - sqrt(4  - 4 * 3 * (-10))) / (2 * 3)
- sqrt(31) / 3 - (1 / 3)
(-b + sqrt(b^2 - fourAC)) / twoA
# save intermediate components
a <- 3
# save intermediate components
a <- 3
# save intermediate components
a <- 3
b <- 2
c <- -10
twoA <- 2 * a
fourAC <- 4 * a * c
(-b + sqrt(b^2 - fourAC)) / twoA
sqrt(-3)
a <- 2
b <- 3
c <- -5
twoA <- 2 * a
fourAC <- 4 * a * c
(-b + sqrt(b^2 - fourAC)) / twoA
(-b - sqrt(b^2 - fourAC)) / twoA
a <- 2
b <- 3
c <- -5
twoA <- 2 * a
fourAC <- 4 * a * c
sqrtB4AC <- sqrt(b^2 - fourAC)
(-b + sqrtB4AC) / twoA
(-b - sqrtB4AC) / twoA
quadratic_solve <- function(a, b, c) {
r1 <- (-b + sqrt(b^2 - 4 * a * c)) / (2 * a)
r2 <- (-b - sqrt(b^2 - 4 * a * c)) / (2 * a)
return(
c(r1, r2)
)
}
quadratic_solve(3, 2, -10)
quadratic_solve(2, 3, -5)
# where are we
getwd()
# let's go somewhere else
setwd("foo")
setwd("~/TAMU")
setwd("~/TAMU/stat_211/stat_211_f2018/topic0/example_scripts")
# let's go somewhere else
setwd("testdir")
# now where are we
getwd()
getwd()
# what's in here
dir()
mtcars
pwd()
dir()
getwd()
write.csv(mtcars, "mtcars.csv", row.names = FALSE)
# see all environment variables
ls()
time()
sys.time()
system.time
system.time()
Sys.Date
Sys.Date()
Sys.time()
x <- 15
classes <- c("STAT 211", "STAT 405", "STAT 616")
what_time <- function() {
Sys.time()
}
# see all environment variables
ls()
# see environment variables in a directory
ls("testdir")
# print out these variables
x
classes
what_time
print(x)
print(classes)
print(what_time)
USJudgeRatings
judge <- USJudgeRatings
judge
print(judge)
# learn something about the variables
str(x)
str(classes)
?str
str(what_time)
str(judge)
View(x)
# look at variables using browser
View(x)
?View
View(what_time)
View(classes)
View(judge)
# go to appropriate directory
# ctrl + shift + h, or
setwd("testdir")
# load the data
oldcars <- read.csv("mtcars")
dir()
# load the data
oldcars <- read.csv("mtcars.csv")
# take a look at the data
str(oldcars)
View(oldcars)
plot(mpg, hp)
# plot miles per gallon versus horsepower
# get mpg
mpg <- oldcars$mpg
# get hp
hp <- oldcars$hp
plot(mpg, hp)
plot(hp, mpg) # does the data make sense?
summary(oldcars)
# average
sum(oldcars$mpg) / n
# number of observations
n <- length(oldcars$mpg)
# sum of mpg values
mpg_sum <- sum(oldcars$mpg)
# average
sum(oldcars$mpg) / n
# built in function
mean(oldcars$mpg)
# another way to plot
plot(hp ~ mpg, data = oldcars)
fit <- lm(hp ~ mpg, data = oldcars)
summary(fit)
plot(fit)
fit$fitted.values
plot(mpg, fit$fitted.values)
?plot
# compare fitted line to data
plot(hp, mpg)
lines(hp, fit$fitted.values)
plot(hp, mpg) # does the data make sense?
# another way to plot, save some typing
# take advantage of formula syntax
plot(mpg ~ hp, data = oldcars)
fit <- lm(mpg ~ hp, data = oldcars)
# compare fitted line to data
plot(hp, mpg)
lines(hp, fit$fitted.values)
saveRDS(fit, file = "mpg_hp_fit.RDS")
# check your handiwork
dir()
?integrate
?deriv
D(y ~ x^4 * (1-x)^2)
D(y ~ x^4 * (1-x)^2, name = "x")
D(expression(x^4 * (1-x)^2), name = "x")
D(expression(log(x^4 * (1-x)^2)), name = "x")
D(expression(log(x^4) + log((1-x)^2), name = "x")
)
D(expression(log(x^4) + log((1-x)^2)), name = "x")
15/20
12/20
colnames(mtcars)
mtcars$drat
?mtcars
plot(mtcars$drat, mtcars$disp)
plot(mtcars$drat, mtcars$hp)
plot(mtcars$drat, mtcars$mpg)
plot(mtcars$drat, mtcars$qsec)
?mtcars
plot(mtcars$mpg, mtcars$qsec)
mtcars$qsec
plot(mtcars$wt, mtcars$qsec)
sample(c(1, 0), 10, FALSE, c(.2, .8))
sample(c(1, 0), 10, TRUE, c(.2, .8))
sample(c(1, 0), 10, TRUE, c(.2, .8))
sample(c(1, 0), 10, TRUE, c(.2, .8))
sample(c(1, 0), 10, TRUE, c(.2, .8))
sample(c(1, 0), 10, TRUE, c(.2, .8))
x
?hist
dir9)
dir()
setwd("~/TAMU/stat_211/stat_211_f2018/topic0/example_scripts")
# how many would enter values into a calculator:
(-2 + sqrt(4  - 4 * 3 * (-10))) / (2 * 3)
(-2 - sqrt(4  - 4 * 3 * (-10))) / (2 * 3)
# save intermediate components, it's more readable
a <- 3
b <- 2
c <- -10
twoA <- 2 * a
fourAC <- 4 * a * c
sqrtB4AC <- sqrt(b^2 - fourAC)
(-b + sqrtB4AC) / twoA
(-b - sqrtB4AC) / twoA
# to solve a new equation, 2x^2 + 3x - 5 = 0, reset a, b, and c
a <- 2
b <- 3
c <- -5
twoA <- 2 * a
fourAC <- 4 * a * c
sqrtB4AC <- sqrt(b^2 - fourAC)
(-b + sqrtB4AC) / twoA
(-b - sqrtB4AC) / twoA
quadratic_solve <- function(a, b, c) {
r1 <- (-b + sqrt(b^2 - 4 * a * c)) / (2 * a)
r2 <- (-b - sqrt(b^2 - 4 * a * c)) / (2 * a)
return(
c(r1, r2)
)
}
quadratic_solve(3, 2, -10)
quadratic_solve(2, 3, -5)
x <- 3
A <- x^4
B <- (1 - x)^2
x <- 3
A <- x^4
B <- (1 - x)^2
A * B
x <- 2
A <- x^4
B <- (1 - x)^2
A * B
dA <- 4 / x
dB <- 2 / (1 - x)
dA - dB
binomial_func <- function(x, k, n) {
x ^ k * (1 - x) ^ (n - k)
}
binomial_func(10, 4, 6)
binomial_func(10, 7, 10)
# can use symbolic differentation
D(expression(log(x^4) + log((1-x)^2)), name = "x")
foo <- 3
foo <- 3
dA <- 4 / x
dB <- - 2 / (1 - x)
dA + dB
dA + dB
rm(a)
rm(A, B, dA, dB)
?rm
ls()
rm(list = ls())
# create some variables for demonstration purposes
x <- 15
classes <- c("STAT 211", "STAT 405", "STAT 616")
what_time <- function() {
Sys.time()
}
judge <- USJudgeRatings
# see all environment variables
ls()
# see environment variables in a directory
ls("testdir")
# where are we
getwd()
# see environment variables in a directory
ls("testdir")
dir()
?ls
x
x
classes
what_time
what_time()
judge
print(x)
print(classes)
print(what_time)
print(judge)
# learn something about the variables, use str function
str(x)
str(classes)
str(what_time)
str(judge)
# look at variables using viewer
View(x)
View(classes)
View(judge)
# look at sizes and lengths
length(x)
x
length(classes)
length(judge)
dim(judge)
# delete all environment variables
rm(list = ls())
# where are we
getwd()
# I want cars
data <- read.csv("mtcars.csv")
dir9)
dir()
# that didn't work
# let's go somewhere else
# set the working directory with a command
setwd("testdir")
# now where are we
getwd()
# what's in here
dir()
# get our data
data <- read.csv("mtcars.csv")
# take a look
data
# load the data
oldcars <- read.csv("mtcars.csv")
# take a look at the data
str(oldcars)
View(oldcars)
# plot miles per gallon versus horsepower
# get mpg
mpg <- oldcars$mpg
mpg
# get hp
hp <- oldcars$hp
hp
?plot
plot(hp, mpg) # does the data make sense?
# another way to plot, save some typing
# take advantage of formula syntax
plot(mpg ~ hp, data = oldcars)
mpg
# number of observations
n <- length(mpg)
# sum of mpg values
mpg_sum <- sum(mpg)
# average
mpg_sum / n
# built in function
mean(mpg)
fit <- lm(mpg ~ hp, data = oldcars)
fit
# compare fitted line to data
plot(hp, mpg)
fit$fitted.values
plot(hp, mpg)
lines(hp, fit$fitted.values)
# save as RDS file
saveRDS(fit, file = "mpg_hp_fit.RDS")
# check your handiwork
dir()
# load it again
readRDS("mpg_hp_fit.RDS")
# load it again
reloaded_fit <- readRDS("mpg_hp_fit.RDS")
reloaded_fit
summary(reloaded_fit)
fit <- lm(mpg ~ hp^2, data = oldcars)
plot(hp, mpg)
lines(hp, fit$fitted.values)
fit <- lm(mpg ~ log(hp), data = oldcars)
plot(hp, mpg)
lines(hp, fit$fitted.values)
colnames(oldcars)
# get mean of weight and quarter mile time
oldcars$wt
oldcars$qsec
mean(oldcars$wt)
mean(oldcars$qsec)
# plot the two variables
plot(oldcars$wt, oldcars$qsec)
plot(qsec ~ wt, data = oldcars)
# fit linear regression
lm(qsec ~ wt, data = oldcars)
# fit linear regression
fit <- lm(qsec ~ wt, data = oldcars)
# compare data with fitted line
lines(wt, oldcars$qsec)
# compare data with fitted line
lines(oldcars$wt, oldcars$qsec)
# compare data with fitted line
lines(oldcars$wt, oldcars$qsec)
?plot.fit
plot(fit)
plot(oldcars$wt, oldcars$qsec)
lines(oldcars$wt, oldcars$qsec)
lines(oldcars$wt, fit$fitted.values)
plot(oldcars$wt, oldcars$qsec)
lines(oldcars$wt, fit$fitted.values)
# save results
saveRDS(fit, file = "fit2.RDS")
# simulate the result of taking the test once. represent as a vector with 1
# indicating you got the question right, 0 wrong
# use the sample function
test_result <- sample(c(1, 0), 20, TRUE, c(p, 1 - p))
# store the probability of answering a question correctly in a variable
p <- .2
# simulate the result of taking the test once. represent as a vector with 1
# indicating you got the question right, 0 wrong
# use the sample function
test_result <- sample(c(1, 0), 20, TRUE, c(p, 1 - p))
test_result
# tally the number of correct questions
sum(test_result)
# did you pass?
sum(test_result) > 13
# now repeat this 1000 times
# use a for loop
# then do this again, but use the replicate function
scores <- c()
scores
scores <- rep(NA, 1000)
scores
scores <- rep(NA, 1000)
for (i in 1:1000) {
test_result <- sample(c(1, 0), 20, TRUE, c(p, 1 - p))
s <- sum(test_result)
# scores <- c(scores, s)
scores[i] <- s
}
scores
# summarize the results with the table function
table(scores)
choose(1, 0)
choose(1, 1)
pi^pi
nrow(mtcars)
setwd("~/TAMU/stat_211/stat_211_f2018/topic1")
plot(1:2, c(1/4, 1/2, 1/4))
plot(0:2, c(1/4, 1/2, 1/4))
plot(0:2, c(1/4, 1/2, 1/4), ylim = c(0, .5))
dotplot(0:2, c(1/4, 1/2, 1/4), ylim = c(0, .5))
barplot(0:2, c(1/4, 1/2, 1/4), ylim = c(0, .5))
plot(0:2, c(1/4, 1/2, 1/4), ylim = c(0, .5), type = "h")
?ecdf
knitr::opts_chunk$set(echo = TRUE)
doc_type <- knitr::opts_knit$get("rmarkdown.pandoc.to")
set.seed(1)
inc <- function() {
if (doc_type == "html") {
"--"
}
else{
""
}
}
ns <- function() {
if (doc_type == "html") {
"---"
}
else{
""
}
}
plot(0:2, cumsum(probs), xlim = c(-1, 3), type = "s")
probs <- c(1/4, 1/2, 1/4)
plot(0:2, cumsum(probs), xlim = c(-1, 3), type = "s")
?plot
plot(0:2, cumsum(probs), xlim = c(-1, 3), type = "S")
par(mfrow = c(1, 2))
probs <- c(1/4, 1/2, 1/4)
cdf_probs <- c(0, probs, 2)
plot(0:2, cumsum(probs), xlim = c(-1, 3), type = "S")
plot(0:2, cumsum(probs), xlim = c(-1, 3), type = "S", ylim = c(0, 1))
cumsum(probs)
cumsum(cdf_probs)
cdf_probs
cdf_probs <- c(0, probs, 0)
cdf_probs
cumsum(cdf_probs)
gc()
plot(-1:3, cumsum(cdf_probs), xlim = c(-1, 3), type = "S", ylim = c(0, 1))
ecdf(x = 0:2)
plot(ecdf(x = 0:2))
cdf_obs <- c(0, 1, 1, 2)
par(mfrow = c(1, 2))
probs <- c(1/4, 1/2, 1/4)
cdf_obs <- c(0, 1, 1, 2)
plot(0:2, probs, ylim = c(0, .5), type = "h", ylab = "PMF", xlab = "X")
plot(ecdf(cdf_obs), ylab = "CDF", xlab = "X")
par(mfrow = c(1, 2))
probs <- c(1/4, 1/2, 1/4)
cdf_obs <- c(0, 1, 1, 2)
plot(0:2, probs, ylim = c(0, .5), type = "h", ylab = "PMF", xlab = "X")
plot(ecdf(cdf_obs), ylab = "CDF", xlab = "X", main = "")
dir9)
dir()
setwd("~/TAMU/stat_211/stat_211_f2018/topic1")
