library(vcd)
mosaic(freq_table)
mosaic(table(GLBSTATUS_new, Q12_new))
## Conditional distribution of political party affiliation, given GLB status.
print(f_Y_given_not_glb <- f_XY[1, ] / f_X[1])
print(f_Y_given_glb <- f_XY[2, ] / f_X[2])
sum(f_Y_given_not_glb)
sum(f_Y_given_glb)
## Law of total probability applied to the probability that a randomly-selected
## individual is a democrat.
print(p_democrat <- f_Y_given_not_glb[2] * f_X[1] + f_Y_given_glb[2] * f_X[2])
f_Y[2]
sum(f_XY[, 2])
## Bayes' Theorem applied to the probability of GLB, given democrat.
print(p_GLB_given_democrat <- (f_Y_given_glb[2] * f_X[2]) / p_democrat)
freq_table[2, 2] / sum(freq_table[, 2])
1/12
1/13
library(MASS)
?MAS
?MASS
V
V <- matrix(data = c(1, -.3, -.3, 1), ncol = 2)
V
mvrnorm(n, mu = 0, Sigma = V)
?mvrnorm
m <- rep(p, 0)
p <- 2
n <- 100
m <- rep(p, 0)
V <- matrix(data = c(1, -.3, -.3, 1), ncol = 2)
mvrnorm(n, mu = m, Sigma = V)
mvrnorm(n = n, mu = m, Sigma = V)
V
mvrnorm(n = n, mu = m, Sigma = eye(p))
mvrnorm(n = n, mu = m, Sigma = diag(p))
m
m <- rep(p, 0)
m <- rep(0, p)
mvrnorm(n = n, mu = m, Sigma = V)
Y <- mvrnorm(n = n, mu = m, Sigma = V)
?MASS
?apply
?qnorm
pexp(1:10)
?pexp
?ppois
pbeta()
?pbeta
X <- mvrnorm(n = n, mu = m, Sigma = V)
U <- cbind(pexp(X[, 1]), pt(X[, 2], df = 3))
U
X <- mvrnorm(n = n, mu = m, Sigma = V)
U <- apply(X, 2, function(x) pnorm(x, mean = 0, sd = 1))
U
hist(U[,1])
hist(U[,])
hist(X[,1])
hist(X[,2])
hist(U[,2])
hist(U[,2], breaks = "FD")
X <- mvrnorm(n = n, mu = m, Sigma = V)
U <- apply(X, 2, function(x) pnorm(x, mean = 0, sd = 1))
Y <- rbind(qexp(U[, 1]), qt(U[, 2], df = 3))
Y
Y <- cbind(qexp(U[, 1]), qt(U[, 2], df = 3))
Y
hist(Y[,1])
hist(Y[,2])
cor(Y)
plot(Y)
p <- 2
n <- 1000
m <- rep(0, p)
V <- matrix(data = c(1, -.3, -.3, 1), ncol = 2)
X <- mvrnorm(n = n, mu = m, Sigma = V)
U <- apply(X, 2, function(x) pnorm(x, mean = 0, sd = 1))
Y <- cbind(qexp(U[, 1]), qt(U[, 2], df = 3))
cor(Y)
cor(X)
hist(U[, 1])
hist(U[, 1])
hist(U[, 1])
hist(U[, 2])
par(mfrow = c(2, 1))
hist(U[, 1])
hist(U[, 2])
par(mfrow = c(1, 2))
hist(U[, 1])
hist(U[, 2])
# transform to desired marginal distributions
Y <- cbind(qexp(U[, 1]), qt(U[, 2], df = 3))
pairs(Y)
par(mfrow = c(1, 2))
hist(Y[, 1])
hist(Y[, 2])
par(mfrow = c(1, 2))
hist(Y[, 1], breaks = "FD")
hist(Y[, 2], breaks = "FD")
cor(Y)
plot(Y)
p <- 2
n <- 10000
m <- rep(0, p)
V <- matrix(data = c(1, -.3, -.3, 1), ncol = 2)
# generate from mv normal
X <- mvrnorm(n = n, mu = m, Sigma = V)
# transform to uniform marginals
U <- apply(X, 2, function(x) pnorm(x, mean = 0, sd = 1))
par(mfrow = c(1, 2))
hist(U[, 1])
hist(U[, 2])
# transform to desired marginal distributions
Y <- cbind(qexp(U[, 1]), qt(U[, 2], df = 3))
par(mfrow = c(1, 2))
hist(Y[, 1], breaks = "FD")
hist(Y[, 2], breaks = "FD")
cor(Y)
plot(Y)
install.packages("exams")
library(exams)
demo(exams)
alpha <- 1
B <- 30
breaks <- rbeta(B, shape1 = 1, shape2 = B)
breaks
gc
gc()
breaks
alpha <- 1
B <- 30
breaks <- rbeta(B, shape1 = 1, shape2 = B)
breaks
1 - breaks
cumprod(1 - breaks)
alpha <- .1
B <- 30
breaks <- rbeta(B, shape1 = 1, shape2 = B)
breaks
cumprod(1 - breaks)
alpha <- .01
B <- 30
breaks <- rbeta(B, shape1 = 1, shape2 = B)
cumprod(1 - breaks)
cumprod(1 - breaks[1:(B-1)])
p <- breaks * c(1, cumprod(1 - breaks[1:(B-1)]))
p
breaks
?cumpord
?cumprod
p
p[28]
p[30]
cumprod(1 - breaks[1:(B-1)])
1 - breaks[1:(B-1)]
breaks
alpha <- .1
B <- 30
breaks <- rbeta(B, shape1 = 1, shape2 = B)
breaks
1 - breaks
alpha <- 10
B <- 30
breaks <- rbeta(B, shape1 = 1, shape2 = B)
breaks
alpha <- .001
B <- 30
breaks <- rbeta(B, shape1 = 1, shape2 = B)
breaks
alpha <- .01
alpha <- .01
B <- 30
breaks <- rbeta(B, shape1 = 1, shape2 = alpha)
breaks
1-  breaks
alpha <- .1
B <- 30
breaks <- rbeta(B, shape1 = 1, shape2 = alpha)
breaks
1 - breaks
cumprod(1 - breaks[1:(B-1)])
p <- breaks * c(1, cumprod(1 - breaks[1:(B-1)]))
p
alpha <- 1
B <- 30
breaks <- rbeta(B, shape1 = 1, shape2 = alpha)
p <- breaks * c(1, cumprod(1 - breaks[1:(B-1)]))
1
p
breaks
alpha <- .1
B <- 30
breaks <- rbeta(B, shape1 = 1, shape2 = alpha)
p <- breaks * c(1, cumprod(1 - breaks[1:(B-1)]))
p
alpha <- 1
B <- 30
breaks <- rbeta(B, shape1 = 1, shape2 = alpha)
p <- breaks * c(1, cumprod(1 - breaks[1:(B-1)]))
p
mu <- rnorm(p, mu0, sigma0)
mu0 <- 0; sigma0 <- 1
mu <- rnorm(p, mu0, sigma0)
p
stick_break <- function(alpha, epsilon, B) {
p <- rbeta(1, alpha)
while (sum(p) < (1 - epsilon)) {
p <- c(p, rbeta(1, alpha) * cumprod(1 - p[1:(B-1)]))
}
p
}
stick_break(.1, .01, 30)
stick_break <- function(alpha, epsilon, B) {
p <- rbeta(1, alpha)
while (sum(p) < (1 - epsilon)) {
p <- c(p, rbeta(1, 1, alpha) * cumprod(1 - p[1:(B-1)]))
}
p
}
p <- stick_break(alpha, .01, B)
stick_break <- function(alpha, epsilon, B) {
p <- rbeta(1, 1, alpha)
while (sum(p) < (1 - epsilon)) {
p <- c(p, rbeta(1, 1, alpha) * cumprod(1 - p[1:(B-1)]))
}
p
}
p <- stick_break(alpha, .01, B)
p
p[1:length(p)]
p[1:length(p)-1]
p[1:(length(p)-1)]
p[1:0]
p[1:length(p)-1]
stick_break <- function(alpha, epsilon, B) {
p <- rbeta(1, 1, alpha)
while (sum(p) < (1 - epsilon)) {
p <- c(p, rbeta(1, 1, alpha) * cumprod(1 - p[1:length(p)-1]))
}
p
}
p <- stick_break(alpha, .01, B)
stick_break <- function(alpha, epsilon, B) {
p <- rbeta(1, 1, alpha)
while (sum(p) < (1 - epsilon)) {
browser()
p <- c(p, rbeta(1, 1, alpha) * cumprod(1 - p[1:length(p)-1]))
}
p
}
p <- stick_break(alpha, .01, B)
p
p
rbeta(1, 1, alpha)
cumprod(1 - p[1:length(p)-1])
rbeta(1, 1, alpha) * cumprod(1 - p[1:length(p)-1])
length(p)
stick_break <- function(alpha, epsilon, B) {
p <- rbeta(1, 1, alpha)
len <- 1
while (sum(p) < (1 - epsilon) || len < B) {
p <- c(p, rbeta(1, 1, alpha) * cumprod(1 - p[1:len]))
len <- len + 1
}
p
}
p <- stick_break(alpha, .01, B)
p
stick_break <- function(alpha, epsilon, B) {
p <- rbeta(1, 1, alpha)
len <- 1
while (sum(p) < (1 - epsilon) || len < B) {
browser()
p <- c(p, rbeta(1, 1, alpha) * cumprod(1 - p[1:len]))
len <- len + 1
}
p
}
p <- stick_break(alpha, .01, B)
p
cumprod(1 - p[1:len])
p[1:len]
1 - p[1:len]
rbeta(1, 1, alpha) * cumprod(1 - p[1:len])
p
sum(p)
p
p <- stick_break(alpha, .01, B)
p
c(p, rbeta(1, 1, alpha) * cumprod(1 - p[1:len]))
c(p, rbeta(1, 1, alpha) * cumprod(1 - p[1:len]))
c(p, rbeta(1, 1, alpha) * cumprod(1 - p[1:len]))
c(p, rbeta(1, 1, alpha) * cumprod(1 - p[1:len]))
c(p, rbeta(1, 1, alpha) * cumprod(1 - p[1:len]))
c(p, rbeta(1, 1, alpha) * cumprod(1 - p[1:len]))
c(p, rbeta(1, 1, alpha) * cumprod(1 - p[1:len]))
c(p, rbeta(1, 1, alpha) * cumprod(1 - p[1:len]))
c(p, rbeta(1, 1, alpha) * cumprod(1 - p[1:len]))
c(p, rbeta(1, 1, alpha) * cumprod(1 - p[1:len]))
p <- stick_break(alpha, .01, B)
c(p, rbeta(1, 1, alpha) * cumprod(1 - p[1:len]))
p
cumprod(1 - p[1:len])
p <- stick_break(alpha, .1, B)
stick_break <- function(alpha, epsilon, B) {
p <- rbeta(1, 1, alpha)
len <- 1
while (sum(p) < (1 - epsilon) || len < B) {
p <- c(p, rbeta(1, 1, alpha) * cumprod(1 - p[1:len]))
len <- len + 1
}
p
}
p <- stick_break(alpha, .1, B)
p
sum(p)
1 - .01
stick_break <- function(alpha, epsilon, B) {
p <- rbeta(1, 1, alpha)
len <- 1
while ((sum(p) < 1 - epsilon) && len < B) {
p <- c(p, rbeta(1, 1, alpha) * cumprod(1 - p[1:len]))
len <- len + 1
}
p
}
p <- stick_break(alpha, .1, B)
B
p
sum(p)
?cumprod
cumprod(1:10)
stick_break <- function(alpha, epsilon, B) {
p <- rbeta(B, 1, alpha)
p <- p * c(1, cumprod(1 - p[1:(B-1)]))
cp <- cumsum(p)
p[cp < (1 - epsilon)]
}
p <- stick_break(alpha, .1, B)
p
p <- stick_break(alpha, .01, B)
p
sum(p)
p <- stick_break(alpha, .001, B)
p
sum(p)
plot(p)
p <- stick_break(alpha, .001, B)
mu0 <- 0; sigma0 <- 1
a0 <- 1; b0 <- 1
mu <- rnorm(p, mu0, sigma0)
sigma <- 1 / rgamma(p, a0, b0)
mu
sigma
mapply(function(mu, sigma) rnorm(n, mu, sigma), mu, sigma)
n <- 1000
mapply(function(mu, sigma) rnorm(n, mu, sigma), mu, sigma)
dim(mapply(function(mu, sigma) rnorm(n, mu, sigma), mu, sigma))
p
sample(1:length(p), size = n, replace = FALSE, prob = p)
sample(1:length(p), size = n, replace = TRUE, prob = p)
z <- mapply(function(mu, sigma) rnorm(n, mu, sigma), mu, sigma)
x <- rnorm(n, mu[z], sigma[z])
z
z <- mapply(function(mu, sigma) rnorm(n, mu, sigma), mu, sigma)
z
z <- sample(1:length(p), size = n, replace = TRUE, prob = p)
z
x <- rnorm(n, mu[z], sigma[z])
x
hist(x)
hist(x, breaks = "FD")
mu0 <- 0; sigma0 <- 5
a0 <- 1; b0 <- 1
mu <- rnorm(p, mu0, sigma0)
sigma <- 1 / rgamma(p, a0, b0)
n <- 1000
z <- sample(1:length(p), size = n, replace = TRUE, prob = p)
x <- rnorm(n, mu[z], sigma[z])
hist(x, breaks = "FD")
p <- stick_break(alpha, .001, B)
p
mu0 <- 0; sigma0 <- 5
a0 <- 1; b0 <- 1
mu <- rnorm(p, mu0, sigma0)
sigma <- 1 / rgamma(p, a0, b0)
mu
sigma
n <- 1000
z <- sample(1:length(p), size = n, replace = TRUE, prob = p)
x <- rnorm(n, mu[z], sigma[z])
hist(x, breaks = "FD")
crp = function(num.customers, alpha) {
table <- c(1)
next.table <- 2
for (i in 1:num.customers) {
if (runif(1,0,1) < alpha / (alpha + i)) {
table <- c(table, next.table)
next.table <- next.table+1
} else {
select.table <- table[sample(1:length(table), 1)]
table <- c(table, select.table)
}
}
table
}
crp(100, 10)
crp(100, 1)
crp(100, 5)
crp(100, 10)
plot(
table( crp(10000, 2) )
,xlab="Table Index", ylab="Frequency"
)
6*1 + 14*2  + 6 * 3 + 4 * 4
(6*1 + 14*2  + 6 * 3 + 4 * 4) / 30
2*1 + 8*2 + 10*3 + 7*4 + 1*5
(2*1 + 8*2 + 10*3 + 7*4 + 1*5) / 30
dbinom(x = 0:12, size = 16, prob = .5)
sum(dbinom(x = 0:12, size = 16, prob = .5))
pbinom(x = 11, size = 16, prob = .5))
pbinom(x = 11, size = 16, prob = .5)
pbinom(q = 11, size = 16, prob = .5)
pbinom(q = 12, size = 16, prob = .5)
dbinom(q = 12, size = 16, prob = .5)
dbinom(x = 12, size = 16, prob = .5)
dbinom(x = 12, size = 16, prob = seq(.1, .9, .1))
dbinom(x = 12, size = 16, prob = seq(.1, .9, .1)) > 1
dbinom(x = 12, size = 16, prob = seq(.1, .9, .1)) > .1
p <- seq(.1, .9, .1)
probs <- dbinom(x = 12, size = 16, prob = p)
p[probs > .1]
?options
gc()
dir()
setwd("~/TAMU/stat_211/stat_211_f2018/topic4/HCMST")
dta <- read.csv("HCMST.csv", row.names = NULL)
dim(dta)
head(dta)
summary(dta)
## Treating our 3,009 individuals as our population of interest, create the pmf of the
## age difference variable (call it X). Note that X has some missing values. Note also
## the two couples for whom age difference is 69 and 70 years (!), respectively.
with(dta, table(is.na(AGE_DIFFERENCE)))
dta <- read.csv("HCMST.csv", row.names = NULL)
dim(dta)
head(dta)
summary(dta)
## Treating our 3,009 individuals as our population of interest, create the pmf of the
## age difference variable (call it X). Note that X has some missing values. Note also
## the two couples for whom age difference is 69 and 70 years (!), respectively.
with(dta, table(is.na(AGE_DIFFERENCE)))
dta$PPAGE
dta$PPAGE
with(dta, PPAGE)
## Treating our 3,009 individuals as our population of interest, create the pmf of the
## age difference variable (call it X). Note that X has some missing values. Note also
## the two couples for whom age difference is 69 and 70 years (!), respectively.
with(dta, table(is.na(AGE_DIFFERENCE)))
tt <- with(dta, table(AGE_DIFFERENCE))
tt
names(tt)
x_possibilities <- as.numeric(names(tt))
x_possibilities
tt
f_X <- tt / sum(tt)
sum(f_X)
plot(f_X)
plot(f_X)
## Joint distribution, considering GLB status as X and political party affiliation as Y.
freq_table <- with(dta, table(GLBSTATUS, Q12))
freq_table
print(f_XY <- prop.table(freq_table))
print(f_XY <- prop.table(freq_table))
sum(f_XY)
print(f_XY <- prop.table(freq_table))
f_XY
## Marginal distribution of GLB status.
print(f_X <- apply(f_XY, MARGIN = 1, FUN = sum))
rowSums(f_XY)
f_X
sum(f_X)
2
colSums(f_XY)
sum(f_Y)
colSums(f_XY)
## Marginal distribution of political party affiliation.
print(f_Y <- apply(f_XY, 2, sum))
sum(f_Y)
sum
apply(f_XY, MARGIN = 1, FUN = sum)
apply(f_XY, MARGIN = 1, FUN = mean)
apply(f_XY, MARGIN = 1, FUN = sd)
apply(f_XY, MARGIN = 1, FUN = max)
## Marginal distribution of political party affiliation.
print(f_Y <- apply(f_XY, 2, sum))
colSums(f_XY)
## A "mosaic" plot as a way to visualize our "contingency table".
##
## NOTE: May need to first install 'vcd' package.
library(vcd)
mosaic(freq_table)
library(car)
GLBSTATUS_old <- dta$GLBSTATUS
GLBSTATUS_new <- recode(GLBSTATUS_old, "'(0) not glb'='not glb'; '(1) glb'='glb'")
Q12_old <- dta$Q12
Q12_new <- recode(Q12_old, "'(1) republican'='republican'; '(2) democrat'='democrat'; '(3) independent'='independent'; '(4) another party, please specify'='other'; '(5) no preference'='no preference'")
mosaic(table(GLBSTATUS_new, Q12_new))
.5, .5
c(.5, .5)^.2
c(.4, .6)^.2
c(.4, .6)^.2 / sum(c(.4, .6)^.2)
