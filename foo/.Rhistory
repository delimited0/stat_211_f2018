unlink('syllabus_cache', recursive = TRUE)
setwd("~/TAMU/stat_211/stat_211_f2018")
dir()
install.packages("tint")
install.packages("xaringan")
dir()
tufte::sans_serif()
?sans_serif
?sans_sirf
?sans_serif
sans_serif()
tufte::sans_serif()
install.packages("formatR")
cereal
data(cereal)
MASS::cereal
MASS::UScereal
str(MASS::UScereal)
knitr::opts_chunk$set(echo = TRUE)
doc_type <- knitr::opts_knit$get("rmarkdown.pandoc.to")
cereal <- MASS:UScereal
cereal <- MASS::UScereal
cereal
str(cereal)
attr(cereal)
attrs(cereal)
?attr
?MASS::UScereal
?barplot()
?table
with(cereal, {
mfr_table <- table(mfr)
mfr_freq <- mfr_table / sum(mfr_table)
barplot(mfr_table)
})
mfr_table <- table(mfr)
with(cereal, {
mfr_table <- table(mfr)
mfr_freq <- mfr_table / sum(mfr_table)
mfr_table
mfr_freq
barplot(mfr_table)
})
table(1:10)
foo <- table(1:10)
foo
MASS::UScereal$mfr
?MASS::UScereal
knitr::kable(table(1:10))
knitr::kable(t(table(1:10)))
USArrests
?options
knitr::opts_chunk$set(echo = TRUE)
doc_type <- knitr::opts_knit$get("rmarkdown.pandoc.to")
summary(USArrests)
?USArrests
state
data(state)
state.abb
summary(USArrests)
par(mfrow = c(1, 2))
hist(USArrests$Murder)
hist(USArrests$UrbanPop)
33 / 12
33 / 6
knitr::opts_chunk$set(echo = TRUE)
doc_type <- knitr::opts_knit$get("rmarkdown.pandoc.to")
roster <- read.csv("roster_509_f2018.csv")
roster
table(roster)
barplot(roster$CLASSCODE)
roster$CLASSCODE
barplot(table(roster$CLASSCODE))
dotplot(table(roster$CLASSCODE))
plot(table(roster$CLASSCODE))
plot(table(roster$MAJOR))
?plot.table
library(ggplot2)
library(data.taable)
library(data.table)
roster <- fread("roster_509_f2018.csv")
roster <- melt(roster)
dim(roster)
View(roster)
knitr::opts_chunk$set(echo = TRUE)
doc_type <- knitr::opts_knit$get("rmarkdown.pandoc.to")
library(ggplot2)
roster <- fread("roster_509_f2018.csv")
roster <- read.csv("roster_509_f2018.csv")
plot(table(roster$MAJOR))
ggplot(roster, aes(x = MAJOR)) +
geom_bar(stat = "identity")
ggplot(roster, aes(y = MAJOR)) +
geom_bar(stat = "identity")
ggplot(roster, aes(x = 1:nrow(roster), y = MAJOR)) +
geom_bar(stat = "identity")
roster_major <- table(roster$MAJOR)
roster_major
barplot(roster_major, horiz = TRUE)
barplot(roster_major, horiz = TRUE, las = 2)
plot(roster_major, horiz = TRUE, las = 2)
order(roster_major)
?barplot
sort(roster_major)
roster_major <- sort(table(roster$MAJOR))
knitr::opts_chunk$set(echo = TRUE)
doc_type <- knitr::opts_knit$get("rmarkdown.pandoc.to")
plot(roster_major, horiz = TRUE, las = 2)
roster_major <- sort(table(roster$MAJOR), decreasing = TRUE)
plot(roster_major, horiz = TRUE, las = 2)
plot(roster_major, las = 2)
## Let p be the proportion of games the team would win out of a very large number of
## games (thousands, say). For example, suppose p = 0.5. That is, the team can be
## expected to win half of the games they play. We can simulate the results of a season
## as follows (0 means loss, 1 means win). Run the following 4 lines of code multiple
## times to see multiple simulated seasons.
p <- 0.9
season <- sample(c(0, 1), size = 16, replace = TRUE, prob = c(1 - p, p))
win_total <- sum(season)
season
win_total
win_total <- numeric(5000)
for(i in 1:5000) {
season <- sample(c(0, 1), size = 16, replace = TRUE, prob = c(1 - p, p))
win_total[i] <- sum(season)
win_total <- numeric(5000)
for(i in 1:5000) {
season <- sample(c(0, 1), size = 16, replace = TRUE, prob = c(1 - p, p))
win_total[i] <- sum(season)
}
}
win_total
## Here are the frequencies (counts) for all possible win totals.
table(win_total)
?plot.table
cars
9 / 16
p <- 0.5
season <- sample(c(0, 1), size = 16, replace = TRUE, prob = c(1 - p, p))
win_total <- sum(season)
season
win_total
win_total <- replicate(1000, sample(c(0, 1), size = 16, replace = TRUE, prob = c(1 - p, p)))
win_total
table(win_total)
?replicate
win_total
win_total <- replicate(1000, {
season <- sample(c(0, 1), size = 16, replace = TRUE, prob = c(1 - p, p))
sum(season)
})
win_total
table(win_total)
dir()
sum(win_total >= 9) / n
knitr::opts_chunk$set(echo = TRUE)
doc_type <- knitr::opts_knit$get("rmarkdown.pandoc.to")
set.seed(1)
3 * (5 + 2)
# use R as a calculator
3 * (5 + 2)
sqrt(pi * 2)
# assignment
a <- TRUE
if (!a) {
print("hello")
} else {
print("goodbye")
}
?print
for (i in 1:10) {
sprintf("%d ", i)
}
for (i in 1:10) {
sprintf("%d ", i)
}
?sprintf
for (i in 1:10) {
sprintf("%f ", i)
}
typeof(3)
length(3)
list1 <- list(1, "a", 3)
list1
names <- c("Bob", "Fatima", "Pierre")
df <- data.frame(age = c(10, 15, 23),
name = names)
# get a column
df[, "name"]
df$name
df[, 2]
?write.csv
cat(" ")
?table.plot
?plot.table
roster <- read.csv("roster_509_f2018.csv")
roster_major <- sort(table(roster$MAJOR), decreasing = TRUE)
plot(roster_major, las = 2, ylab = "Students", cex = .9)
plot(roster_major, las = 2, ylab = "Students", cex.lab = .6)
plot(roster_major, las = 2, ylab = "Students",
cex.lab = cex_val, cex.axis = cex_val, cex.main = cex_val, cex.sub = cex_val)
cex_val <- .6
plot(roster_major, las = 2, ylab = "Students",
cex.lab = cex_val, cex.axis = cex_val, cex.main = cex_val, cex.sub = cex_val)
plot(roster_major, las = 1.5, ylab = "Students",
cex.lab = cex_val, cex.axis = cex_val, cex.main = cex_val, cex.sub = cex_val)
plot(roster_major, las = 3, ylab = "Students",
cex.lab = cex_val, cex.axis = cex_val, cex.main = cex_val, cex.sub = cex_val)
dir()
dir("topic0")
data <- rnorm(100)
hist(data)
hist(data)
cube
string
hello_func <- function(name) {
paste0(name, " says hello")
}
# call function
hello_func("Patrick")
# see function
hello_func
hello_func <- function(name, response = "goodbye") {
paste0(name, " says ", response)
}
hello_func <- function(name, response = "hello") {
paste0(name, " says ", response)
}
# call function
hello_func("Patrick")
# see function
hello_func
# override default argument
hello_func("Patrick", response = "goodbye")
?hist
?hist
?help
help(read.csv, help_type = "text")
help(read.csv, help_type = "text")
help(read.csv)
help(read.csv, help_type="html")
help(read.csv, help_type="pdf")
dir()
install.packages(MASS)
install.packages("MASS")
install.packages("xkcd")
knitr::opts_chunk$set(echo = TRUE)
doc_type <- knitr::opts_knit$get("rmarkdown.pandoc.to")
set.seed(1)
library(xkcd)
gc()
gc()
gc()
?gc
roster <- read.csv("roster_509_f2018.csv")
roster_major <- sort(table(roster$MAJOR), decreasing = TRUE)
roster_major
barchart(roster_major)
lattice::barchart(roster_major)
?lattice
lattice::dotplot(roster_major)
gc()
gc()
?rmarkdown::render
gc()
install.packages("webshot")
library(webshot)
install_phantomjs()
file_name <- paste0("topic0//", normalizePath("intro_r_tutorial.html"))
paste0("topic0//", normalizePath("intro_r_tutorial.html"))
file_name <- "topic0//intro_r_tutorial.html"
webshot(file_name, "intro_r_tutorial_slides.pdf")
setwd("~/TAMU/stat_211/stat_211_f2018/foo")
print("hello world")
dir()
source("hello_world.R")
print("hello_world")
pi
NA
baz <- 1:10
baz
vec3 <- seq(from = -4, to = 2, by = 2)
vec3
vec[3]
vec3[3]
bar <- list(1, 2, 3, list("a", "b"), 3)
bar
version
hist
?hist
help(data.frame)
install.packages("mcmcse")
library("compiler", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
View(bar)
mtcars
foo <- mtcars
View(foo)
knitr::opts_chunk$set(echo = TRUE)
b10 <- function(alpha, n, x) {
exp(n * log(2) + lgamma(n + 2 * alpha) + lgamma(2 * alpha) -
2 * lgamma(alpha) - lgamma(x + alpha) - lgamma(n - x + alpha))
}
n <- 104490000
x <- 52263470
b10(1, n, x)
lgamma(x)
lgamma(n)
alpha = 1
n * log(2)
n * log(2) + lgamma(n + 2 * alpha) + lgamma(2 * alpha)
n * log(2) + lgamma(n + 2 * alpha) + lgamma(2 * alpha) -
2 * lgamma(alpha) - lgamma(x + alpha) - lgamma(n - x + alpha)
gamma(n)
b10 <- function(alpha, n, x) {
exp(n * log(2) - lgamma(n + 2 * alpha) + lgamma(2 * alpha) -
2 * lgamma(alpha) + lgamma(x + alpha) + lgamma(n - x + alpha))
}
b10(1, n, x)
b10(2, n, x)
plot(alphas, b10(alphas), pch = 19)
alphas <- seq(.1, 1, .01)
plot(alphas, b10(alphas), pch = 19)
plot(alphas, b10(alphas, n, x), pch = 19)
alphas <- seq(.1, 10, .01)
plot(alphas, b10(alphas, n, x), pch = 19)
alphas <- seq(.1, 10, .01)
alphas <- seq(.1, 10, .01)
plot(alphas, 1 / (1 + b10(alphas, n, x)), pch = 19)
alphas <- seq(.1, 50, .01)
alphas <- seq(.1, 50, .01)
plot(alphas, 1 / (1 + b10(alphas, n, x)), pch = 19)
alphas <- seq(.1, 50, .1)
alphas <- seq(.1, 50, .1)
plot(alphas, 1 / (1 + b10(alphas, n, x)), pch = 19)
alphas <- seq(.1, 50, .1)
plot(alphas, 1 / (1 + b10(alphas, n, x)), type = 'l')
alphas <- seq(.1, 100, .1)
plot(alphas, 1 / (1 + b10(alphas, n, x)), type = 'l')
alphas <- seq(.1, 200, .1)
plot(alphas, 1 / (1 + b10(alphas, n, x)), type = 'l')
